// DisneyPlus
// Created by: SoloDev.Nebula
// Description: DisneyPlus for Nebula
// Generated by Nebula Code Assistant
// Template: Progressive Web App

// NebulaApp PWA Template - WITH SLEEK SLIDE-UP NAV DOCK
// Based on the WORKING NebulaApp-Single.js pattern
// Features a hidden navigation dock that slides up from the bottom
//
// TODO: Replace 'PWAHost' with your app name throughout this file
// TODO: Change the initialUrl to your desired website

class Disneyplus {
    constructor(initialUrl = 'https://disneyplus.com') {
        // Initialize PWA hosting properties
        this.windowId = null;
        this.initialUrl = initialUrl;
        this.currentUrl = initialUrl;
        this.navDockVisible = false;
        this.navDockTimeout = null;
        
        this.init();
    }
    
    async init() {
        if (!window.windowManager) {
            console.error('WindowManager not available');
            return;
        }
        
        // Create window - same pattern as NebulaApp-Single.js
        this.windowId = window.windowManager.createWindow({
            title: 'DisneyPlus', // TODO: Change app title
            width: 1200,       // Wider for web content
            height: 800,       // Taller for web content
            resizable: true,
            maximizable: true,
            minimizable: true
        });
        
        // Load this app into the window - SAME AS WORKING TEMPLATE
        window.windowManager.loadApp(this.windowId, this);
        
        console.log(`PWAHost initialized with window ${this.windowId}`);
    }
    
    /**
     * Called by WindowManager to render the app's content
     * Clean interface with hidden slide-up nav dock
     */
    render() {
        const container = document.createElement('div');
        container.className = 'pwa-container';
        container.style.cssText = `
            width: 100%;
            height: 100%;
            background: var(--nebula-bg-primary);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            font-family: var(--nebula-font-family);
            position: relative;
        `;

        // Create the main content area with webview
        const contentArea = this.createContentArea();
        
        // Create simple status bar
        const statusBar = this.createStatusBar();
        
        // 🌟 NEW: Create the slide-up nav dock
        const navDock = this.createNavDock();
        
        // 🌟 NEW: Create invisible trigger area
        const triggerArea = this.createTriggerArea();

        // Assemble the UI
        container.appendChild(contentArea);
        container.appendChild(statusBar);
        container.appendChild(navDock);
        container.appendChild(triggerArea);

        // Setup after DOM is ready
        setTimeout(() => {
            this.setupEventListeners();
        }, 100);

        return container;
    }
    
    /**
     * Create the main content area with webview
     */
    createContentArea() {
        const contentArea = document.createElement('div');
        contentArea.className = 'pwa-content';
        contentArea.style.cssText = `
            flex: 1;
            position: relative;
            background: white;
            overflow: hidden;
        `;

        // Create webview
        const webview = document.createElement('webview');
        webview.id = 'pwa-webview';
        webview.src = this.initialUrl;
        webview.style.cssText = `
            width: 100%;
            height: 100%;
            border: none;
            background: white;
        `;
        
        // Basic webview attributes
        webview.setAttribute('allowpopups', 'true');
        webview.setAttribute('nodeintegration', 'false');

        contentArea.appendChild(webview);

        return contentArea;
    }
    
    /**
     * Create simple status bar
     */
    createStatusBar() {
        const statusBar = document.createElement('div');
        statusBar.className = 'pwa-status';
        statusBar.style.cssText = `
            height: 24px;
            background: var(--nebula-surface);
            border-top: 1px solid var(--nebula-border);
            display: flex;
            align-items: center;
            padding: 0 16px;
            font-size: 12px;
            color: var(--nebula-text-secondary);
            flex-shrink: 0;
            z-index: 10;
            position: relative;
        `;

        statusBar.innerHTML = `
            <span id="pwa-status-text">Ready</span>
            <div style="flex: 1;"></div>
            <span id="pwa-shortcuts" style="font-size: 11px; opacity: 0.7;">💡 Tip: Hover left edge for navigation dock.</span>
            <div style="width: 8px;"></div>
            <span id="pwa-url-info">${this.currentUrl}</span>
        `;

        return statusBar;
    }
    
    /**
     * 🌟 NEW: Create the slide-up navigation dock
     */
    createNavDock() {
        const navDock = document.createElement('div');
        navDock.id = 'pwa-nav-dock';
        navDock.className = 'nav-dock';
        navDock.style.cssText = `
            position: absolute;
            bottom: 24px;
            left: 16px;
            transform: translateY(100%);
            background: var(--nebula-surface);
            border: 1px solid var(--nebula-border);
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            padding: 8px;
            display: flex;
            gap: 4px;
            z-index: 1000;
            transition: transform 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
            opacity: 0;
            pointer-events: none;
        `;

        navDock.innerHTML = `
            <button class="dock-btn" data-action="back" title="Go Back (Alt+←)">
                <span class="material-symbols-outlined">arrow_back</span>
            </button>
            <button class="dock-btn" data-action="forward" title="Go Forward (Alt+→)">
                <span class="material-symbols-outlined">arrow_forward</span>
            </button>
            <div class="dock-separator"></div>
            <button class="dock-btn" data-action="reload" title="Reload (F5)">
                <span class="material-symbols-outlined">refresh</span>
            </button>
            <button class="dock-btn" data-action="stop" title="Stop (Esc)">
                <span class="material-symbols-outlined">stop</span>
            </button>
            <div class="dock-separator"></div>
            <button class="dock-btn" data-action="home" title="Home (Ctrl+H)">
                <span class="material-symbols-outlined">home</span>
            </button>
        `;

        return navDock;
    }
    
    /**
     * 🌟 NEW: Create invisible trigger area at bottom-left edge
     */
    createTriggerArea() {
        const triggerArea = document.createElement('div');
        triggerArea.id = 'pwa-trigger';
        triggerArea.className = 'nav-trigger';
        triggerArea.style.cssText = `
            position: absolute;
            bottom: 24px;
            left: 0;
            width: 8px;
            height: 60px;
            z-index: 999;
            cursor: pointer;
            background: transparent;
        `;

        return triggerArea;
    }
    
    /**
     * Setup event listeners with nav dock functionality
     */
    setupEventListeners() {
        const webview = document.getElementById('pwa-webview');
        const navDock = document.getElementById('pwa-nav-dock');
        const triggerArea = document.getElementById('pwa-trigger');
        
        if (!webview) {
            console.error('PWA: Webview not found');
            return;
        }

        console.log('PWA: Setting up event listeners...');

        // Webview events
        webview.addEventListener('did-start-loading', () => {
            this.updateStatus('Loading...');
            this.updateNavButtons();
        });

        webview.addEventListener('did-stop-loading', () => {
            this.updateStatus('Loaded');
            this.updateNavButtons();
        });

        webview.addEventListener('did-fail-load', (e) => {
            this.updateStatus('Failed to load');
            console.error('PWA: Failed to load:', e);
        });

        webview.addEventListener('did-navigate', (e) => {
            this.currentUrl = e.url;
            this.updateUrlInfo();
            this.updateNavButtons();
        });

        // 🌟 NEW: Nav dock trigger events
        if (triggerArea && navDock) {
            triggerArea.addEventListener('mouseenter', () => {
                this.showNavDock();
            });

            // Also show dock when hovering the dock itself
            navDock.addEventListener('mouseenter', () => {
                this.showNavDock();
            });

            navDock.addEventListener('mouseleave', () => {
                this.scheduleHideNavDock();
            });

            // Hide when mouse leaves the left edge area
            document.addEventListener('mousemove', (e) => {
                const mouseX = e.clientX;
                
                // If mouse is not near left edge, hide dock
                if (mouseX > 100) {
                    this.scheduleHideNavDock();
                }
            });
        }

        // 🌟 NEW: Nav dock button clicks
        if (navDock) {
            navDock.addEventListener('click', (e) => {
                const button = e.target.closest('.dock-btn');
                if (button) {
                    const action = button.dataset.action;
                    this.handleNavAction(action);
                }
            });
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (!this.isWindowActive()) return;
            
            if (e.altKey && e.key === 'ArrowLeft') {
                e.preventDefault();
                this.handleNavAction('back');
            }
            if (e.altKey && e.key === 'ArrowRight') {
                e.preventDefault();
                this.handleNavAction('forward');
            }
            if (e.key === 'F5') {
                e.preventDefault();
                this.handleNavAction('reload');
            }
            if (e.ctrlKey && e.key === 'h') {
                e.preventDefault();
                this.handleNavAction('home');
            }
            if (e.key === 'Escape') {
                e.preventDefault();
                this.handleNavAction('stop');
            }
        });

        // Add styles
        this.addNavDockStyles();
        
        console.log('PWA: Event listeners setup complete');
    }
    
    /**
     * 🌟 NEW: Show navigation dock with animation
     */
    showNavDock() {
        const navDock = document.getElementById('pwa-nav-dock');
        if (!navDock) return;

        // Clear any pending hide timeout
        if (this.navDockTimeout) {
            clearTimeout(this.navDockTimeout);
            this.navDockTimeout = null;
        }

        this.navDockVisible = true;
        navDock.style.opacity = '1';
        navDock.style.pointerEvents = 'auto';
        navDock.style.transform = 'translateY(-8px)';
        
        this.updateNavButtons();
    }
    
    /**
     * 🌟 NEW: Schedule hiding the nav dock
     */
    scheduleHideNavDock() {
        if (this.navDockTimeout) {
            clearTimeout(this.navDockTimeout);
        }
        
        this.navDockTimeout = setTimeout(() => {
            this.hideNavDock();
        }, 1500); // Hide after 1.5 seconds
    }
    
    /**
     * 🌟 NEW: Hide navigation dock with animation
     */
    hideNavDock() {
        const navDock = document.getElementById('pwa-nav-dock');
        if (!navDock) return;

        this.navDockVisible = false;
        navDock.style.opacity = '0';
        navDock.style.pointerEvents = 'none';
        navDock.style.transform = 'translateY(100%)';
    }
    
    /**
     * 🌟 NEW: Update navigation button states
     */
    updateNavButtons() {
        const webview = document.getElementById('pwa-webview');
        const navDock = document.getElementById('pwa-nav-dock');
        
        if (!webview || !navDock) return;

        const backBtn = navDock.querySelector('[data-action="back"]');
        const forwardBtn = navDock.querySelector('[data-action="forward"]');
        
        if (backBtn) {
            backBtn.disabled = !webview.canGoBack();
            backBtn.style.opacity = webview.canGoBack() ? '1' : '0.4';
        }
        if (forwardBtn) {
            forwardBtn.disabled = !webview.canGoForward();
            forwardBtn.style.opacity = webview.canGoForward() ? '1' : '0.4';
        }
    }
    
    /**
     * Handle navigation actions
     */
    handleNavAction(action) {
        const webview = document.getElementById('pwa-webview');
        if (!webview) return;

        console.log('PWA: Nav action:', action);

        switch (action) {
            case 'back':
                if (webview.canGoBack()) {
                    webview.goBack();
                }
                break;
            case 'forward':
                if (webview.canGoForward()) {
                    webview.goForward();
                }
                break;
            case 'reload':
                webview.reload();
                break;
            case 'stop':
                webview.stop();
                break;
            case 'home':
                webview.loadURL(this.initialUrl);
                break;
        }
    }
    
    /**
     * Update status text
     */
    updateStatus(message) {
        const statusText = document.getElementById('pwa-status-text');
        if (statusText) {
            statusText.textContent = message;
        }
    }
    
    /**
     * Update URL info
     */
    updateUrlInfo() {
        const urlInfo = document.getElementById('pwa-url-info');
        if (urlInfo) {
            try {
                const url = new URL(this.currentUrl);
                urlInfo.textContent = url.hostname;
            } catch (e) {
                urlInfo.textContent = this.currentUrl;
            }
        }
    }
    
    /**
     * Check if this window is currently active
     */
    isWindowActive() {
        const windowElement = document.getElementById(this.windowId);
        return windowElement && windowElement.classList.contains('active');
    }
    
    /**
     * 🌟 NEW: Add CSS styles for navigation dock
     */
    addNavDockStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .dock-btn {
                width: 40px;
                height: 40px;
                background: var(--nebula-surface-hover);
                border: 1px solid var(--nebula-border);
                border-radius: 8px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
                color: var(--nebula-text-primary);
            }
            
            .dock-btn:hover:not(:disabled) {
                background: var(--nebula-primary);
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }
            
            .dock-btn:active {
                transform: translateY(0);
            }
            
            .dock-btn:disabled {
                opacity: 0.4;
                cursor: not-allowed;
            }
            
            .dock-btn .material-symbols-outlined {
                font-size: 20px;
            }
            
            .dock-separator {
                width: 1px;
                height: 24px;
                background: var(--nebula-border);
                margin: 0 4px;
                align-self: center;
            }
            
            .nav-trigger:hover {
                background: rgba(0, 122, 255, 0.2);
                border-radius: 0 4px 4px 0;
            }
        `;
        document.head.appendChild(style);
    }
    
    /**
     * Required methods for WindowManager integration
     */
    getTitle() {
        return 'DisneyPlus';
    }
    
    getIcon() {
        return '🎬';
    }
    
    cleanup() {
        if (this.navDockTimeout) {
            clearTimeout(this.navDockTimeout);
        }
        console.log('PWA Host cleanup');
    }
}

// Export for use in NebulaDesktop

// Register the app class globally  
window.Disneyplus = Disneyplus;

// Register with launcher if available
if (window.registerNebulaApp) {
    window.registerNebulaApp({
        id: 'disneyplus',
        name: 'DisneyPlus',
        icon: '🎬',
        className: 'Disneyplus',
        description: 'DisneyPlus for Nebula',
        category: 'user-generated'
    });
}

// Create initial instance
new Disneyplus();